Mastering lists and tuples in Python is a crucial step toward becoming an advanced Python programmer. This guide provides a comprehensive overview of creating, manipulating, and optimizing data with these structures.

📚 What is a List?
A list in Python is a collection of items that can contain different data types, such as integers, strings, or even other lists. Lists are mutable, meaning you can modify their contents after creation.
---

✍️ Creating a List

# Empty list
my_list = []

# List with elements
my_list = [1, 2, 3, 4, 5]

# Mixed data types
mixed_list = [1, "hello", 3.14, True]

---

🔧 Common List Functions and Methods

---

1️⃣ Adding Elements

# Append adds a single element
my_list.append(6)

# Extend adds multiple elements
my_list.extend([7, 8, 9])

# Insert adds an element at a specific position
my_list.insert(2, "New")


2️⃣ Removing Elements

# Remove deletes the first occurrence of a value
my_list.remove(3)

# Pop removes and returns an element at a specific position
last_element = my_list.pop()

# Clear empties the entire list
my_list.clear()



3️⃣ Sorting and Ordering

# Sort in ascending order
my_list.sort()

# Sort in descending order
my_list.sort(reverse=True)

# Create a new sorted list
new_list = sorted(my_list)



4️⃣ Slicing and Indexing

# Access element at an index
element = my_list[1]

# Slice a portion of the list
sub_list = my_list[2:5]

# Negative indexing
last = my_list[-1]



5️⃣ Iterating Through Lists

for item in my_list:
    print(item)

# List comprehensions
squares = [x**2 for x in range(10)]
📚 What is a Tuple?
A tuple is an ordered and immutable sequence of objects. They are often used for data that should not be changed.

---


✍️ Creating a Tuple

# Empty tuple
my_tuple = ()

# Tuple with elements
my_tuple = (1, 2, 3)

# Simple tuple without parentheses
my_tuple = 1, 2, 3

---

🔧 Common Tuple Operations

1️⃣ Indexing and Slicing

# Access element at an index
element = my_tuple[0]

# Slice a portion of the tuple
sub_tuple = my_tuple[1:3]


2️⃣ Iterating Through Tuples

for item in my_tuple:
    print(item)


3️⃣ Converting Tuple to List
list_from_tuple = list(my_tuple)


4️⃣ Packing and Unpacking Tuples
# Packing
tuple_pack = 1, 2, 3

# Unpacking
a, b, c = tuple_pack

---

## 🆚 Differences Between Lists and Tuples

| **Feature**     | **List**                      | **Tuple**                     |
|------------------|-------------------------------|--------------------------------|
| **Mutability**   | Mutable (can be changed)      | Immutable (cannot be changed) |
| **Performance**  | Slower                       | Faster                        |
| **Use Case**     | For data that changes         | For constant data             |



🚀 Tips for Handling Large Data Sets

1️⃣ Efficiently Creating Large Lists

# List comprehensions for fast generation
large_list = [x for x in range(1000000)]
2️⃣ Using Generators
Generators are more memory-efficient than lists.

python
Kopiera kod
generator = (x**2 for x in range(1000000))
3️⃣ Use Tuples for Speed
If the data is constant, prefer tuples over lists for better performance.

4️⃣ Sorting Large Lists
Consider using libraries like NumPy or pandas for more efficient sorting and manipulation of large data sets.

🌟 Advanced Techniques
1️⃣ Nested Lists
python
Kopiera kod
# Creating a matrix
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
2️⃣ Zip and Unpacking
python
Kopiera kod
list1 = [1, 2, 3]
list2 = ["a", "b", "c"]
combined = list(zip(list1, list2))
3️⃣ Lambda and Map
python
Kopiera kod
# Use lambda to manipulate lists
result = list(map(lambda x: x*2, [1, 2, 3]))
4️⃣ Using Modules
python
Kopiera kod
# Use itertools for advanced iteration
from itertools import permutations, combinations
combinations_list = list(combinations([1, 2, 3], 2))
